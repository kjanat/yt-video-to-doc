name: Security

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for outdated packages
        run: pnpm outdated
        continue-on-error: true

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          # Get all production licenses in JSON format
          pnpm licenses list --prod --json > licenses.json
          
          # Define allowed licenses (regex pattern)
          ALLOWED_LICENSES="MIT|ISC|BSD.*|Apache-2.0|CC0-1.0|CC-BY-3.0|CC-BY-4.0|Unlicense|LGPL-2.1|LGPL-3.0"
          
          # Check for disallowed licenses using jq
          echo "Checking production dependency licenses..."
          
          # Extract and check licenses
          DISALLOWED=$(jq -r --arg allowed "$ALLOWED_LICENSES" '
            to_entries[] | 
            select(.value.license | test($allowed; "i") | not) | 
            "\(.key): \(.value.license)"
          ' licenses.json 2>/dev/null || echo "")
          
          if [ -n "$DISALLOWED" ]; then
            echo "❌ Found packages with disallowed licenses:"
            echo "$DISALLOWED"
            exit 1
          else
            echo "✅ All production dependencies have allowed licenses"
            # Show summary
            jq -r 'to_entries | group_by(.value.license) | map({license: .[0].value.license, count: length}) | .[] | "\(.license): \(.count) packages"' licenses.json | sort
          fi